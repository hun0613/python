시간복잡도
    시간복잡도가 높다 : 시간이 오래 걸리는 알고리즘
    시간복잡도가 낮다 : 시간이 짧게 걸리는 알고리즘

공간복잡도
    공간복잡도가 높다 : 공간을 많이 차지하는 알고리즘
    공간복잡도가 낮다 : 공간을 적게 차지하는 알고리즘

# 빅오표기법
    3N^3 + 5N^2 + 1,000,000
    -> 가장 높은 항만 취급 => O(N^3)

좋음 <---------------------------------------------------------------------------------------------------> 나쁨
O(1) 상수시간 - O(logN) 로그시간 - O(N) 선형시간 - O(NlogN) 로그선형시간 - O(N^2) 이차시간 - O(N^3) 삼차시간 - O(2^n) 지수시간



array = [3, 5, 1, 2, 4]
summary = 0

for x in array:      //데이터의 개수를 한번씩 접근하기 때문에 O(N)
    summary += x

print(summary)



# 알고리즘 설계 Tip!
In case, 연산 횟수가 5억을 넘어가는 경우:
    - C언어 기준으로 통상 1~3초 가량의 시간이 소요
    - Python 기준으로 통상 5~15초 가량의 시간이 소요

코딩테스트 문제에서 시간제한은 통상 1~5초가량이다.
    *문제에 명시되어 있지 않은 경우 대략 5초 정도라고 생각하고 문제를 푸는 것이 합리적이다.


# 요구사항에 따라 적절한 알고리즘 설계
    * 문제에서 가장 먼저 확인해야 하는 내용은 시간제한(수행시간 요구사항)이다.

    In case, 시간제한이 1초인 문제를 만났을 때:
        - N의 범위가 500인 경우 : O(N^3)인 알고리즘을 설계하면 문제풀이 가능
        - N의 범위가 2,000인 경우 : O(N^2)인 알고리즘을 설계하면 문제풀이 가능
        - N의 범위가 100,000인 경우 : O(NlogN)인 알고리즘을 설계하면 문제풀이 가능
        - N의 범위가 10,000,000인 경우 : O(N)인 알고리즘을 설계하면 문제풀이 가능